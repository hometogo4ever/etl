// CONSTS (상수)
var CONST_XLEARN_SITE_URL = "https://myetl.snu.ac.kr/learningx";
var CONST_COMMONS_SITE_URL = "https://lcms.snu.ac.kr";
var CONST_CATALOG_SITE_URL = "https://etl.snu.ac.kr";
var CONST_ROCKET_CHAT_URL = "https://etlchat.snu.ac.kr";
// var CONST_CATALOG_SITE_URL = "https://newetl.snu.ac.kr"; 2022.08.23 카탈로그 도메인 변경
var CONST_HELP_COURSE_ID = 4;
var GA_TRACK_ID = 'G-S306L53P4E';
var CUSTOM_CSS_VER = '0.0.1';

$(".ic-Login__innerContent").css({
    "background" : "rgba(255,255,255,0.6)",
    "border" : "2px rgba(255,255,255,0.6)",
});

/************************************************/
/* custom.css 로딩
/************************************************/
var cssId = 'learningx-custom-style';  // you could encode the css path itself to generate id..
if (!document.getElementById(cssId))
{
    var head  = document.getElementsByTagName('head')[0];
    var link  = document.createElement('link');
    link.id   = cssId;
    link.rel  = 'stylesheet';
    link.type = 'text/css';
    link.href = CONST_XLEARN_SITE_URL + '/customs/canvas/custom.css?v=' + CUSTOM_CSS_VER;
    link.media = 'all';
    head.appendChild(link);
}


/************************************************/
/* Canvas Global Menu 작업 처리
/************************************************/

// 로고를 LearningX의 메인 페이지로 링크 연결
$(".ic-app-header__logomark").attr("href", CONST_CATALOG_SITE_URL);

// Global Navigation에 마이페이지 메뉴 연결
var mypageLang = {
    'ko': '나의 진행/<br>과거 강좌',
    'en': 'My Page<br>(Courses)',
    'ja': 'My Page<br>(Courses)',
    'zh-Hant': 'My Page<br>(Courses)',
    'zh-Hans': 'My Page<br>(Courses)'
};

var selectedMypageLang = mypageLang['en'];
if (typeof mypageLang[ENV.LOCALE]  !== 'undefined') selectedMypageLang = mypageLang[ENV.LOCALE];

var helpMenu =
    '<li class="menu-item ic-app-header__menu-list-item">' +
    '<a id="global_nav_profile_link" href="' + CONST_CATALOG_SITE_URL + '/mypage" class="ic-app-header__menu-list-link">' +
    '<div class="menu-item-icon-container" aria-hidden="true">' +
    '<img src="' + CONST_XLEARN_SITE_URL + '/customs/canvas/mypage_icon.png">' +
    '</div>' +
    '<div class="menu-item__text">' + selectedMypageLang + '</div>' +
    '</a>' +
    '</li>';

// $(".ic-app-header__main-navigation .ic-app-header__menu-list").append(helpMenu);

// Global Navigation에 이용안내 메뉴 연결
var helpLang = {
    'ko': '이용안내',
    'en': 'Help',
    'ja': 'ご利用案内',
    'zh-Hant': '使用指南',
    'zh-Hans': '使用指南'
};

var selectedHelpLang = helpLang['en'];
if (typeof helpLang[ENV.LOCALE]  !== 'undefined') selectedHelpLang = helpLang[ENV.LOCALE];

var helpMenu =
    '<li class="menu-item ic-app-header__menu-list-item">' +
    '<a id="global_nav_profile_link" href="/courses/' + CONST_HELP_COURSE_ID + '" class="ic-app-header__menu-list-link">' +
    '<div class="menu-item-icon-container" aria-hidden="true">' +
    '<img src="' + CONST_XLEARN_SITE_URL + '/customs/canvas/help_icon.png">' +
    '</div>' +
    '<div class="menu-item__text">' + selectedHelpLang + '</div>' +
    '</a>' +
    '</li>';

$(".ic-app-header__main-navigation .ic-app-header__menu-list").append(helpMenu);

/************************************************/
/* IE 공지사항 오류 대응
/************************************************/

function isIE() {
    var ua = window.navigator.userAgent;
    var msie = ua.indexOf("MSIE ");

    return (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./));
}

$(document).ajaxComplete(function (event, xhr, settings) {
    var courseId = ENV.COURSE_ID;
    if (courseId == undefined) {
        if (ENV.COURSE != undefined) courseId = ENV.COURSE.id;
    }
    // IE 공지사항 한줄 늘어나는 문제 대응
    if (isIE() && settings.url.indexOf('/api/v1/courses/' + courseId) !== -1) {
        setTimeout(function() {
            $('.ic-announcement-row').find('.ic-item-row__content-col').css('width', 'calc(100% - 230px)');
        }, 500);
    }
});

/************************************************/
/* 로그아웃 연동
/************************************************/

// Canvas logout 에서 자체 대응하도록 수정되어 있습니다. 2022-12-10 wafe
/*
$(document).ready(function() {
    // canvas 로그아웃 할 때 자동 로그아웃 처리함
    $("#global_nav_profile_link").on('click', function() {
        if ($(this).parents('li').hasClass("ic-app-header__menu-list-item--active")) {
            setTimeout(function() {

                var submitted = false;
                $("form").on("submit", function(event) {
                    if (submitted) return;
                    submitted = true;

                    event.preventDefault();

                    // Catalog 로그아웃 수행
                    document.location.href = CONST_CATALOG_SITE_URL + '/logout';
                });
            }, 500);
        }
    });
});
*/


/************************************************/
/* 사용자 소속 정보 표시
/************************************************/

// 과목 내 사용자 및 그룹에서 소속 정보를 표시한다.
if ($.inArray('teacher', ENV['current_user_roles']) > -1) {

    $(document).ajaxComplete(function (event, xhr, settings) {
        if (settings.url.indexOf('/api/v1' + ENV.COURSE_ROOT_URL + '/users?') !== -1 && settings.url.indexOf('include_inactive=true') !== -1) {
            var lang = {
                'ko': '학과',
                'en': 'Department',
                'ja': '学科',
                'zh-Hant': '教训',
                'zh-Hans': '教訓'
            };

            var selectedLang = lang['en'];
            if (typeof lang[ENV.LOCALE]  !== 'undefined') selectedLang = lang[ENV.LOCALE];

            var pageIdx = 1;
            var myRe = /&page=(\d+)/g;
            var myArray = myRe.exec(settings.url);
            if (myArray != null) pageIdx = parseInt(myArray[1]);

            if (pageIdx == 1) {
                $(".roster.ic-Table thead th").eq(3).after("<th>" +selectedLang + "</th>");
            }

            var canvasUsers = JSON.parse(xhr.responseText);
            var loginIds = [];

            for (var i = canvasUsers.length - 1; i >= 0; i--) {
                var user = canvasUsers[i];
                loginIds.push(user.login_id);

                $('.collectionViewItems tr').eq(i + (50 * (pageIdx - 1))).find('td').eq(3).after("<td></td>");
            }

            var courseId = ENV.course.id;
			var xnToken = document.cookie.split('; ').find(row => row.startsWith('xn_api_token')).split('=')[1];

            $.ajax({
                type : "GET",
                url : CONST_XLEARN_SITE_URL + "/api/v1/courses/" + courseId + "/users/detail",
                headers: {
                  'Authorization': `Bearer ${xnToken}`,
                },
                data : { keywards : loginIds.toString() },
                dataType : "json",
                success: function(response) {
                    $('.collectionViewItems tr').each(function(i) {
                        var loginId = $(this).find('td').eq(2).text();
                        loginId = loginId.trim();

                        for (var j = 0; j < response.length; j++) {
                            var user = response[j];
                            if (loginId != user.user_login) continue;

                            if (!user.dept_name) user.dept_name = '';
                            $(this).find('td').eq(4).html(user.dept_name);
                        }
                    });
                }
            });
        }
    });
}

// In Google Analytics you'll need to set up custom dimensions as follows
// Custom Dimension 1 = Canvas User ID --- Scope = User
// Custom Dimension 2 = Archived --- Scope = User
// Custom Dimension 3 = Canvas User Role --- Scope = User
// Custom Dimension 4 = Canvas Course ID --- Scope = Hit
// Custom Dimension 5 = Canvas Course Name --- Scope = Hit
// Custom Dimension 6 = Canvas Sub-Account ID --- Scope = Hit

var script = document.createElement('script');
script.src = 'https://www.googletagmanager.com/gtag/js?id=' + GA_TRACK_ID;
document.head.appendChild(script);

window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());

// 페이지 뷰
gtag('config', GA_TRACK_ID);

/*(function (i, s, o, g, r, a, m) {
    i['GoogleAnalyticsObject'] = r;
    i[r] = i[r] || function () {
        (i[r].q = i[r].q || []).push(arguments)
    }, i[r].l = 1 * new Date();
    a = s.createElement(o),
    m = s.getElementsByTagName(o)[0];
    a.async = 1;
    a.src = g;
    m.parentNode.insertBefore(a, m)
})(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga');*/

/*$(document).ready(function () {

    // START - More Google Analytics Tracking Code
    var sUserId
    var sUserRole
    var sTemp // Course ID from URL
    var _course
    var sCourseName = null
    var parent_account //Give you the subaccount_id that the course is in

    ////////////////// CHANGE UA # HERE /////////////////////
    ga('create', GA_TRACK_ID, 'auto');

    //Get User Information
    sUserId = ENV["current_user_id"]
    ga('set', 'dimension1', sUserId);


    //Get User Role
    if ($.inArray('admin', ENV['current_user_roles']) == -1 && $.inArray('teacher', ENV['current_user_roles']) == -1 && $.inArray('student', ENV['current_user_roles']) > -1) {
        sUserRole = "student"
    } else if ($.inArray('admin', ENV['current_user_roles']) == -1 && $.inArray('teacher', ENV['current_user_roles']) > -1) {
        sUserRole = "teacher"
    } else if ($.inArray('admin', ENV['current_user_roles']) > -1) {
        sUserRole = "admin"
    } else {
        sUserRole = "other"
    }

    ga('set', 'dimension3', sUserRole);

    //If the user is in a course
    try {
        sTemp = window.location.pathname.match(/\/courses\/(\d+)/);
        if (sTemp[1]) {

            //Get Course information - Course Name and parent sub-account id
            var d1 = $.get('/api/v1/courses/' + sTemp[1], function (_course) {
                parent_account = _course.account_id
                parent_account = parent_account.toString();
                sCourseName = _course.name
            });


            $.when(d1).done(function (_account) {
                // ...do stuff...
                ga('set', 'dimension4', sTemp[1]);
                ga('set', 'dimension5', sCourseName);
                ga('set', 'dimension6', parent_account);
                ga('send', 'pageview');
            });
        } else {
            ga('send', 'pageview');
        }
    } catch (err) {}

    // END - Google Analytics Tracking Code

});*/

$(document).ready(function() {
  // 퀴즈 미리보기 밑에 안내 문구를 추가한다.
  try {
    var courseMatch = window.location.pathname.match(
      /\/courses\/(\d+)\/quizzes\/(\d+)/
    );

    if (courseMatch) {
      $('.preview_quiz_button > #preview_quiz_button').after('<p style="width:70%;margin: 0 auto;color:#0B7BF9;text-align: left;font-size:14px;margin-top:15px;">※ 하단의 ‘미리보기’버튼은 <u>테스트 학생으로서 풀이해 보는 기능</u>입니다.<br/>이 버튼으로 미리보기를 하는 경우, 가상의 테스트 학생 응시 기록으로 남게 되어 퀴즈 공개 전이라도 학습자의 응시한 기록이 있다는 안내가 표시될 수 있으나, 실제 학생이 풀이한 기록은 아니므로 안심하시기 바랍니다.<br/><br/>만약 테스트 응시 기록을 남기지 않고 확인하고자 하시는 경우 <u>우측 상단의 <b>‘미리보기’</b></u> 기능을 이용하실 수 있습니다.</p>')
    }
  } catch (error) {}

  // canvas 사용자 설정 페이지에서 이메일 주소, 연락처 추가하는 버튼을 없앤다.
  try {
        if (window.location.pathname === "/profile/settings") {
          // 이메일이 하나만 있는 경우 이메일 추가 버튼 없애줌
          $('.single.channel_list.email_channels.ic-Table.ic-Table--condensed > tbody > tr:last-of-type').hide()
          // 이메일이 두개 이상 있는 경우 이메일 추가 버튼 없애줌
          $('.channel_list.email_channels.ic-Table.ic-Table--condensed > tbody > tr:last-of-type').hide()
          // 연락처 추가하는 블록 전체를 없앰
          $('.channel_list.other_channels.ic-Table.ic-Table--condensed').hide()
        }
  } catch (error) {}
});

/************************************************/
/*   사용자 핸드폰 번호 정보 표시(숭실대 커스텀)   */
/************************************************/
$(document).ready(function() {
    try {
        // 숭실대 Custom 사항이므로, 숭실대인 경우에만 아래 로직을 수행한다.
        if(CONST_XLEARN_SITE_URL !== "https://canvas.ssu.ac.kr/learningx") return;

        // 사용자 상세 페이지 접근이고, 교수자/운영자인 경우에만 보이는 Element가 있으면 
        // 해당 사용자의 휴대폰번호를 얻어오는 AJAX 호출하여
        // 휴대폰번호를 사용자 상세화면 라벨에 추가함
        var courseUserDetailPageMatch = window.location.pathname.match(
            /\/courses\/(\d+)\/users\/(\d+)/
        )

        if(courseUserDetailPageMatch && $('#name_and_email .email').length > 0) {
            var courseId = courseUserDetailPageMatch[1]
            var canvasUserId = courseUserDetailPageMatch[2]

            $.get(CONST_XLEARN_SITE_URL + "/customs/courses/" + courseId + "/users/" + canvasUserId + "/cellphone", function(res){
                var templateHtml = $("<tr><th>휴대전화:</th><td class='cellphone'>"+res.cellphone+"</td></tr>")
                $(".profile_table > tbody > tr").eq(4).after(templateHtml)
            })
        }
    } catch (error) {}
});

// Canvas 과목 내 메뉴 중 학습설계진단, 협업 메뉴 숨김
$(document).ready(function () {
    try {
        var courseMatch = window.location.pathname.match(
          /\/courses\/(\d+)/
        );

        if (courseMatch[1]) {
          $('.section > .collaborations').hide();
          $('.section > .context_external_tool_6').hide();
        }
      } catch (error) {}
});

// 강의계획서 오늘, 편집 버튼 숨김
$(document).ready(function () {
  $(".edit_syllabus_link.btn").css("display", "none");
  $(".jump_to_today_link").css("display", "none");
});

// SIS 가져오기의 '전체 일괄처리임' 체크 박스 숨기기
$(document).ready(function() {
    try {
        var isSisImportPage = window.location.pathname.match(
            /\/accounts\/(\d+)\/sis_import/
        );
        
        if (!!isSisImportPage && isSisImportPage.length > 0) {
            $('#batch_check').hide()
        }
    } catch (error) {} 
});

// 과목 홈(우측 사이드바)의 '다른 과목 내용 가져오기' 버튼 숨기기
$(document).ready(function() {
    try {
        var isCourseHome = window.location.pathname.match(
            /\/courses\/(\d+)/
        );
        
        if (!!isCourseHome && isCourseHome.length > 0) {
            $("#course_show_secondary > .btn.button-sidebar-wide").each(function(idx,item) {
                let TargetItem = $(item).attr('href').match(/content_migrations/)
                if (!!TargetItem) {
                    !DISPLAY_EXPORT_ANOTHER_COURSE_BUTTON ? $(item).hide() : $(item).html($(item).html().replace('다른 과목 내용', '지난 학기 과목'))
                }
            })
        }
    } catch (error) {} 
});

// 퀴즈의 수정, 편집 화면 하단의 '내용이 변경되었음을 사용자에게 알림' 체크 박스 숨기기
$(document).ready(function() {
    try {
        var isQuizEditPage = window.location.pathname.match(
            /\/courses\/(\d+)\/quizzes\/(\d+)\/edit/
        );
        
        if (!!isQuizEditPage && isQuizEditPage.length > 0) {
            $('.span6.notify').hide()
            $('.span6').css('float','right')
        }
    } catch (error) {} 
});

// 과제 생성 화면 하단의 '내용이 변경되었음을 사용자에게 알림' 체크 박스 숨기기
$(document).ready(function() {
    try {
        var isNewAssignmentsPage = window.location.pathname.match(
            /\/courses\/(\d+)\/assignments\/new/
        );
        
        if (!!isNewAssignmentsPage && isNewAssignmentsPage.length > 0) {
            setTimeout(function() {
                $('.form-actions > .pull-left').hide()
                $('.form-actions > .assignment__action-buttons').css('float','right')
            }, 500);
        }
    } catch (error) {} 
});

// 과제 편집 화면 하단의 '내용이 변경되었음을 사용자에게 알림' 체크 박스 숨기기
$(document).ready(function() {
    try {
        var isAssignmentsEditPage = window.location.pathname.match(
            /\/courses\/(\d+)\/assignments\/(\d+)\/edit/
        );
        
        if (!!isAssignmentsEditPage && isAssignmentsEditPage.length > 0) {
            setTimeout(function() {
                $('.form-actions > .pull-left').hide()
                $('.form-actions > .assignment__action-buttons').css('float','right')
            }, 500);
        }
    } catch (error) {} 
});

// 수업계획서 편집 버튼 옵션에 따라 숨기기
$(document).ready(function() {
    try {
        var isSyllabusPage = window.location.pathname.match(
            /\/courses\/(\d+)\/assignments\/syllabus/
        );
        
        if (!!isSyllabusPage && isSyllabusPage.length > 0 && !DISPLAY_SYLLABUS_EDIT_BUTTON) {
            $('.edit_syllabus_link.btn.button-sidebar-wide').hide()
        }
    } catch (error) {} 
});

// 교수인 경우에 과목 설정에서 ‘과목 콘텐츠 리셋’, ‘과목 영구 삭제', ‘과목 종료’ 버튼 숨기기
$(document).ready(function() {
    var sUserId
    var sUserRole

    sUserId = ENV["current_user_id"]

    //Get User Role
    if ($.inArray('admin', ENV['current_user_roles']) == -1 && $.inArray('teacher', ENV['current_user_roles']) == -1 && $.inArray('student', ENV['current_user_roles']) > -1) {
        sUserRole = "student"
    } else if ($.inArray('admin', ENV['current_user_roles']) == -1 && $.inArray('teacher', ENV['current_user_roles']) > -1) {
        sUserRole = "teacher"
    } else if ($.inArray('admin', ENV['current_user_roles']) > -1) {
        sUserRole = "admin"
    } else {
        sUserRole = "other"
    }

    try {
        var isCourseSettingsPage = window.location.pathname.match(
            /\/courses\/(\d+)\/settings/
        );

        if (!!isCourseSettingsPage && isCourseSettingsPage.length > 0 && sUserRole === "teacher") {     
            $(".Button.Button--link.Button--link--has-divider.Button--course-settings").each(function (idx, item) {
                let TargetItem = $(item).attr('href').match(/(conclude|delete|reset)/)
                if (!!TargetItem) {
                    $(item).hide()
                }
            })
        }
    } catch (error) {}
});

// 과목 → 공지 우측 상단의 ‘외부피드’ 링크 숨기기
$(document).ready(function() {
    try {
        var isAnnouncementsPage = window.location.pathname.match(
            /\/courses\/(\d+)\/announcements/
        )

        if (!!isAnnouncementsPage && isAnnouncementsPage.length > 0) {
            $('#external_feed').hide()
        }   
    } catch (error) {}
});

// 과목 -> 공지에서 공지글 작성시 ‘Podcast 피드 사용’ 옵션 숨기기
$(document).ready(function() {
    try {
        var isNewAnnouncementPage = window.location.pathname.match(
            /\/courses\/(\d+)\/discussion_topics\/new/
        );
        
        if (!!isNewAnnouncementPage && isNewAnnouncementPage.length > 0) {
            setTimeout(function() {
                $("label[for = 'podcast_enabled']").hide()
            }, 500);
        }
    } catch (error) {} 
});

// 대시보드 우측 하단의 '성적보기' 버튼 숨기기 및 대시보드 하단 좌/우의 ‘Instructure’, ‘오픈소스 LMS’ 문구 및 링크 숨기기
$(document).ready(function() {
    try {
        $('#wrapper.ic-Layout-wrapper > #footer.ic-app-footer').hide()

        setTimeout(function() {
            let target = $('.Button.button-sidebar-wide')
            if (!!target.attr('href') && !!target.attr('href').match(/grade/)) {
                target.hide()
            }
        }, 500);
    } catch (error) {}
});

// 계정 -> 설정 편집의 ‘Instructure로부터 정보, 뉴스, 팁 받기' 및 ‘암호 변경’ 숨기기
$(document).ready(function() {
    try {
        var isProfileSettingsPage = window.location.pathname.match(
            /\/profile\/settings/
        );
        
        if (!!isProfileSettingsPage && isProfileSettingsPage.length > 0) {
            $("label[for = 'user_subscribe_to_emails']").hide()
            $('.edit_data_row.select_change_password_row').detach()
        }
    } catch (error)  {} 
});

/**
 * 과목 메뉴 > 모듈에서 상단에 모듈 일괄 삭제 기능 추가
 */
$(document).ready(function() {
    try {
        const isModuleTab = window.location.pathname.match(
            /\/courses\/(\d+)\/modules$/
        );

        if (!!isModuleTab && isModuleTab.length > 0) {
            const parentElement = document.querySelector('#content .header-bar');

            if (!parentElement) return;

            const isInstructor = !!parentElement.querySelector('.add_module_link');

            if (!isInstructor) return;

            const buttonTitleLangs = {
                ko: '모듈 일괄 삭제',
                en: 'Delete All Modules',
            }

            const deleteDescriptionLangs = {
                ko: '모든 모듈을 일괄 삭제하시겠습니까?\n삭제된 모듈을 다시 생성하기 위해서는 개별 추가해야 합니다.',
                en: 'Are you sure you want to delete all modules?\nTo re-create deleted modules, you need to add them one by one.',
            }

            const deleteSuccessLangs = {
                ko: '일괄 삭제가 완료되었습니다.',
                en: 'All modules have been deleted.',
            }

            const deleteFailedLangs = {
                ko: '일괄 삭제 도중 실패하였습니다.\n새로고침 후 다시 시도해주세요.',
                en: 'Failed to delete modules.\nPlease refresh and try again.',
            }

            const courseId = isModuleTab[1];

            const deleteAllButton = document.createElement('button');
            deleteAllButton.innerText = buttonTitleLangs[ENV.LOCALE] || buttonTitleLangs["en"];
            deleteAllButton.style.border = "1px solid #ccc";
            deleteAllButton.style.borderRadius = "5px";
            deleteAllButton.style.padding = "8px 14px";
            deleteAllButton.style.backgroundColor = "white";
            deleteAllButton.style.color = "#666";


            deleteAllButton.onclick = async function() {
                if (!confirm(deleteDescriptionLangs[ENV.LOCALE] || deleteDescriptionLangs["en"])) return;

                try {
                    const resp = await fetch(`/api/v1/courses/${courseId}/modules?per_page=${Number.MAX_SAFE_INTEGER}`);
                    const respBody = await resp.text();
                    const json = respBody.slice(9); // while(1);[{"id":1004... 에서 앞의 while 구문 떼기
                    const modules = JSON.parse(json);
                    for (const mod of modules) {
                        const tok = document.cookie.split('; ').find(row => row.startsWith('_csrf_token')).split('=')[1];
                        await fetch(`/api/v1/courses/${courseId}/modules/${mod.id}`, {
                            method: 'POST',
                            headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            },
                            body: `authenticity_token=${tok}&_method=DELETE`
                        });
                    }
    
                    alert(deleteSuccessLangs[ENV.LOCALE] || deleteSuccessLangs["en"]);
                    window.location.reload();
                } catch (err) {
                    alert(deleteFailedLangs[ENV.LOCALE] || deleteFailedLangs["en"]);
                }
            }
            
            parentElement.insertBefore(deleteAllButton, parentElement.firstChild);
        }
        
    } catch(err) {}
});

/**
 * Rocket Chat 관련 코드 시작
 */
// 이미지 cache 문제 때문에 JS 업데이트 닐짜를 문자열로 저장해서 ?v=... 으로 붙이도록 함
var rocketChatCustomJsUpdated ='20230614';
var currentRocketChatSize = 0;
var iframeLoaded = false;

$(function () {
    // attach Rocket.Chat icon
    attachRocketChatIcon();

    // attach Rocket.Chat Size Selector
    attachRocketChatSizeSelector();

    // attach Rocket.Chat iframe
    attachRocketChatContainer();
});

function attachRocketChatIcon() {
    var rocketChatIcon = $(`
        <div id="rocket-chat-icon">
            <img class="alert_circle" src="${CONST_XLEARN_SITE_URL + '/customs/canvas/rocket_chat_icon_alert_circle.svg?v=' + rocketChatCustomJsUpdated}" />
        </div>
    `);
    rocketChatIcon.css({
        'position': 'fixed',
        'z-index': '9999',
        'right': '0px',
        'top': '50%',
        'transform': 'translate(0, -50%)',
        'width': '23px',
        'height': '72px',
        'display': 'flex',
        'align-items': 'center',
        'justify-content': 'center',
        'background': '#FFFFFF 0% 0% no-repeat padding-box',
        'box-shadow': '0px 3px 16px #00000029',
        'border': '2px solid #1E98BE',
        'border-radius': '7px 0px 0px 7px',
        'border-right': 'none',
        'box-sizing': 'border-box',
        'cursor': 'pointer',
        'transition': 'all 0.3s ease-in-out',
    });
    rocketChatIcon.children('.alert_circle').css({
        'width': '12px',
        'height': '12px',
        'position': 'absolute',
        'top': '-5px',
        'right': '15px',
        'z-index': '9999',
        'display': 'none',
        'transition': 'all 0.3s ease-in-out',
    });

    rocketChatIcon.hover(
        function() {
            $(this).css({
                'border-radius': '24px 0px 0px 24px',
                'width': '55px',
            });
            $(this).find('.chat_closed_icon').css({
                'opacity': '0',
            });
            $(this).find('.chat_open_icon').css({
                'opacity': '1',
            });
            $(this).find('.alert_circle').css({
                'top': '10px',
                'right': '10px',
            });
        },
        function() {
            $(this).css({
                'border-radius': '7px 0px 0px 7px',
                'width': '23px',
            });
            $(this).find('.chat_closed_icon').css({
                'opacity': '1',
            });
            $(this).find('.chat_open_icon').css({
                'opacity': '0',
            });
            $(this).find('.alert_circle').css({
                'top': '-5px',
                'right': '15px',
            });
        }
    );
    rocketChatIcon.on('click', onClickRocketChatIcon);
    $('#application').append(rocketChatIcon);

    var rocketChatClosedIcon = $(`<div class="chat_closed_icon"></div>`);
    rocketChatClosedIcon.css({
        'width': '4px',
        'height': '16px',
        'background-image': `url(${CONST_XLEARN_SITE_URL + '/customs/canvas/rocket_chat_icon_closed.svg'})`,
        'background-position': 'center',
        'background-size': 'cover',
        'background-repeat': 'no-repeat',
        'opacity': '1',
        'transition': 'all 0.2s ease-in-out',
        'position': 'absolute',
    });
    rocketChatIcon.append(rocketChatClosedIcon);

    var rocketChatOpenIcon = $(`<div class="chat_open_icon"></div>`);
    rocketChatOpenIcon.css({
        'width': '50px',
        'height': '50px',
        'background-image': `url(${CONST_XLEARN_SITE_URL + '/customs/canvas/rocket_chat_icon.png?v=' + rocketChatCustomJsUpdated})`,
        'background-position': '0 center',
        'background-size': 'cover',
        'background-repeat': 'no-repeat',
        'opacity': '0',
        'transition': 'all 0.2s ease-in-out',
        'position': 'absolute',
    });
    rocketChatIcon.append(rocketChatOpenIcon);
}

function attachRocketChatSizeSelector() {
    var rocketChatSizeSelector = $(`<div id="rocket-chat-size-selector"></div>`);
    rocketChatSizeSelector.css({
        'position': 'fixed',
        'display' : 'none',
        'z-index': '10000',
        'right': '10px',
        'bottom': '3px',
        'width': '251px',
        'height': '36px',
        'align-items': 'center',
        'justify-content': 'center',
        'background': '#FFFFFF 0% 0% no-repeat padding-box',
        'box-shadow': '0px 3px 12px #00000029',
        'border': '1px solid #B2B2B2',
        'border-radius': '5px',
        'box-sizing': 'border-box'
    });
    $('#application').append(rocketChatSizeSelector);

    var rocketChatSizeBtn375 = $(`<div id="rocket-chat-size-375"></div>`);
    rocketChatSizeBtn375.css({
        'width': '49px',
        'height': '30px',
        'background-image': `url(${CONST_XLEARN_SITE_URL + '/customs/canvas/rocket_chat_size_btn_375.png?v=' + rocketChatCustomJsUpdated})`,
        'background-repeat': 'no-repeat',
        'cursor': 'pointer'
    });
    rocketChatSizeBtn375.hover(
        function() {
            if (currentRocketChatSize != 375) {
                $(this).css({
                    'background-position': '-49px 0'
                });
            }
        },
        function() {
            if (currentRocketChatSize != 375) {
                $(this).css({
                    'background-position': '0 0'
                });
            }
        }
    );
    rocketChatSizeBtn375.on('click', function () {
        changeRocketChatContainerSize(375);
    });
    rocketChatSizeSelector.append(rocketChatSizeBtn375);

    var rocketChatSizeBtn500 = $(`<div id="rocket-chat-size-500"></div>`);
    rocketChatSizeBtn500.css({
        'width': '49px',
        'height': '30px',
        'background-image': `url(${CONST_XLEARN_SITE_URL + '/customs/canvas/rocket_chat_size_btn_500.png?v=' + rocketChatCustomJsUpdated})`,
        'background-repeat': 'no-repeat',
        'cursor': 'pointer'
    });
    rocketChatSizeBtn500.hover(
        function() {
            if (currentRocketChatSize != 500) {
                $(this).css({
                    'background-position': '-49px 0'
                });
            }
        },
        function() {
            if (currentRocketChatSize != 500) {
                $(this).css({
                    'background-position': '0 0'
                });
            }
        }
    );
    rocketChatSizeBtn500.on('click', function () {
        changeRocketChatContainerSize(500);
    });
    rocketChatSizeSelector.append(rocketChatSizeBtn500);

    var rocketChatSizeBtn781 = $(`<div id="rocket-chat-size-781"></div>`);
    rocketChatSizeBtn781.css({
        'width': '49px',
        'height': '30px',
        'background-image': `url(${CONST_XLEARN_SITE_URL + '/customs/canvas/rocket_chat_size_btn_781.png?v=' + rocketChatCustomJsUpdated})`,
        'background-repeat': 'no-repeat',
        'cursor': 'pointer'
    });
    rocketChatSizeBtn781.hover(
        function() {
            if (currentRocketChatSize != 781) {
                $(this).css({
                    'background-position': '-49px 0'
                });
            }
        },
        function() {
            if (currentRocketChatSize != 781) {
                $(this).css({
                    'background-position': '0 0'
                });
            }
        }
    );
    rocketChatSizeBtn781.on('click', function () {
        changeRocketChatContainerSize(781);
    });
    rocketChatSizeSelector.append(rocketChatSizeBtn781);

    var rocketChatNewWindowBtn = $(`<div id="rocket-chat-new-window"></div>`);
    rocketChatNewWindowBtn.css({
        'width': '49px',
        'height': '30px',
        'background-image': `url(${CONST_XLEARN_SITE_URL + '/customs/canvas/rocket_chat_new_window_btn.png?v=' + rocketChatCustomJsUpdated})`,
        'background-repeat': 'no-repeat',
        'cursor': 'pointer'
    });
    rocketChatNewWindowBtn.hover(
        function() {
            $(this).css({
                'background-position': '-49px 0'
            });
        },
        function() {
            $(this).css({
                'background-position': '0 0'
            });
        }
    );
    rocketChatNewWindowBtn.on('click', onClickRocketChatNewWindow);
    rocketChatSizeSelector.append(rocketChatNewWindowBtn);

    var rocketChatCloseBtn = $(`<div id="rocket-chat-close"></div>`);
    rocketChatCloseBtn.css({
        'width': '49px',
        'height': '30px',
        'background-image': `url(${CONST_XLEARN_SITE_URL + '/customs/canvas/rocket_chat_close_btn.png?v=' + rocketChatCustomJsUpdated})`,
        'background-repeat': 'no-repeat',
        'cursor': 'pointer'
    });
    rocketChatCloseBtn.hover(
        function() {
            $(this).css({
                'background-position': '-49px 0'
            });
        },
        function() {
            $(this).css({
                'background-position': '0 0'
            });
        }
    );
    rocketChatCloseBtn.on('click', onClickRocketChatClose);
    rocketChatSizeSelector.append(rocketChatCloseBtn);
}

function attachRocketChatContainer() {
    var rocketChatContainer = $(`<div id="rocket-chat-container"></div>`);
    rocketChatContainer.css({
        'display': 'none',
        'position': 'fixed',
        'z-index': '9998',
        'right': '10px',
        'bottom': '42px',
        'width': '781px',
        'height': '600px',
        'border': '1px solid #A2A2A2',
        'border-radius': '3px',
        'background-color': 'white',
        'box-shadow': '0 3px 12px rgba(0,0,0, .16)'
    });
    
    var rocketChatIframe = $(`<iframe id="rocket-chat-iframe" allowfullscreen frameborder="0" scrolling="no"></iframe>`);
    rocketChatIframe.css({
        'width': '100%',
        'height': '100%',
        'border-radius': '3px',
    });

    rocketChatContainer.append(rocketChatIframe);
    $('#application').append(rocketChatContainer);
}

function onClickRocketChatIcon() {
    if (!iframeLoaded) {
        $('#rocket-chat-iframe').attr('src', CONST_ROCKET_CHAT_URL);
        iframeLoaded = true;
    }

    $('#rocket-chat-icon').hide();
    $('#rocket-chat-size-selector').css('display', 'flex');
    
    // window 크기에 따른 default 크기 설정
    var defaultSize = 781;
    if ($(window).width() < 768) {
        defaultSize = 375;
    }
    changeRocketChatContainerSize(defaultSize);
}

function onClickRocketChatNewWindow() {
    window.open(CONST_ROCKET_CHAT_URL);
}

function onClickRocketChatClose() {
    $('#rocket-chat-container').hide();
    $(`#rocket-chat-size-${currentRocketChatSize}`).css('background-position', '0 0');
    currentRocketChatSize = 0;

    $('#rocket-chat-icon').show();
    $('#rocket-chat-size-selector').hide();
}

function changeRocketChatContainerSize(size) {
    $('#rocket-chat-container').show();
    $('#rocket-chat-container').css('width', `${size}px`);
    $(`#rocket-chat-size-${currentRocketChatSize}`).css('background-position', '0 0');
    currentRocketChatSize = size;
    $(`#rocket-chat-size-${size}`).css('background-position', '-98px 0');
}

/**
 * iframe event를 사용하여 알림 확인 여부를 표시한다.
 * https://developer.rocket.chat/rocket.chat/iframe-integration/iframe-events
 */
var userSubscriptions = [];
window.addEventListener('message', function(e) {
    switch (e.data.eventName) {
        case 'unread-changed-by-subscription':
            var eventData = e.data.data;
            var rid = eventData.rid;
            var unreadAlert = eventData.alert;
            var unreadCount = eventData.unread;
            userSubscriptions[rid] = {'alert': unreadAlert, 'unread': unreadCount};
            checkAlert();
            break;
    }
});

function checkAlert() {
    var showAlert = false;
    for (var key in userSubscriptions) {
        var userSubscription = userSubscriptions[key];
        showAlert = showAlert || userSubscription.alert;
    }
    changeChatIcon(showAlert);
}

function changeChatIcon(showAlert) {
    showAlert ? $('.alert_circle').show() : $('.alert_circle').hide();
}

/**
 * Rocket Chat 관련 코드 끝
 */


/**
 * START: 퀴즈 참여 후 수정 시 상단 안내 문구 관련 코드 
 */
$(document).ready(function() {
    try {
        const isModuleTab = window.location.pathname.match(
            /\/courses\/(\d+)\/quizzes\/(\d+)\/edit$/
        );

        if (!!isModuleTab) {
            const warningDomElement = document.querySelector("body.quizzes #quiz_edit_wrapper #student_submissions_warning");

            if (!!warningDomElement) {
                const quizWarningLang = {
                    'ko': '[경고!!] 학생들이 이미 퀴즈를 풀이한 이력이 있어 편집 시 주의해야 합니다.<br />편집 내용이 풀이 중인 학생에게 반영되지 않고, 변경 전 풀이한 학생의 퀴즈를 수동 채점해야 합니다.',
                    'en': '[Warning!!] Be careful when editing, as students have already taken quizzes.<br />Edits do not appear to students taking the quiz, and submissions must be manually graded before editing.',
                };

                const warningDescription = quizWarningLang[ENV.LOCALE] || quizWarningLang['en'];
                const screedreaderDescription =  warningDescription.replace('<br />', '');

                warningDomElement.innerHTML = `
                    <i class="icon-warning"></i>
                    <span class="screenreader-only">
                        ${screedreaderDescription}
                    </span>
                    <p>
                        ${warningDescription}
                    </p>
                `;
            }
        }
    } catch {}
});
/**
 * END: 퀴즈 참여 후 수정 시 상단 안내 문구 관련 코드 
 */

/**
 *  과제 및 평가 메뉴 > 과제 선택 > 제출물 세부정보 > 제출물 preview iframe > 주석첨삭 보기 기능 추가
 */
$(document).ready(function () {
    try {
        const isSubmissionPreviewFrame = window.location.href.match(
            /\/courses\/(\d+)\/assignments\/(\d+)\/submissions\/(\d+)\?preview=1/
        );
        if (!isSubmissionPreviewFrame || isSubmissionPreviewFrame.length === 0) {
            return;
        }

        const langs = {
            viewFeedback: {
                ko: '주석첨삭 보기',
                en: 'View Feedback'
            },
            openInNewWindow: {
                ko: '새 창으로 띄우기',
                en: 'Open in new window'
            }
        };

        const getPreviewUrl = async function (fileId) {
            const response = await fetch(`/api/v1/files/${fileId}?include[]=preview_url`);
            const responseBody = await response.text();
            const responseJson = responseBody.slice(9); // while(1);[{"id":1004... 에서 앞의 while 구문 떼기
            /** @type {{ preview_url: string }} */
            const fileInfo = JSON.parse(responseJson);
            return fileInfo.preview_url;
        };

        // PDF 주석 첨삭기 다이얼로그 생성
        const previewDialog = document.createElement('div');
        previewDialog.style.padding = '0px';
        previewDialog.style.overflow = 'hidden';

        // PDF 주석 첨삭기 iframe 생성
        const previewFrame = document.createElement('iframe');
        previewFrame.style.width = '100%';
        previewFrame.style.height = '100%';
        previewFrame.style.overflow = 'hidden';
        previewFrame.style.border = '0px';

        previewDialog.appendChild(previewFrame);
        document.body.appendChild(previewDialog);

        // 버튼 추가
        const submissions = document.querySelectorAll('.file-upload-submission');
        Array.from(submissions).filter(submission => {
            // PDF 파일에만 버튼을 추가한다.
            const downloadBtn = submission.querySelector('.file-upload-submission-info > a');
            const fileName = downloadBtn.innerText;
            const extension = fileName.split('.').pop().trim();
            return extension === 'pdf';
        }).forEach(submission => {
            const downloadBtn = submission.querySelector('.file-upload-submission-info > a');
            const fileName = downloadBtn.innerText;
            const downloadUrl = downloadBtn.href;
            const groups = downloadUrl.match(/\/courses\/(.*)\/assignments\/(.*)\?download=(.*)/);
            const fileId = groups[3];

            const viewFeedbackContainer = submission.querySelector('.file-upload-submission-attachment');
            // 주석첨삭 보기 버튼 생성
            const viewFeedbackBtn = document.createElement('a');
            viewFeedbackBtn.innerText = langs.viewFeedback[ENV.LOCALE] || langs.viewFeedback.en;
            viewFeedbackBtn.style.cursor = 'pointer';
            viewFeedbackBtn.onclick = async function () {
                // 주석첨삭 보기 버튼 클릭 시
                const previewUrl = await getPreviewUrl(fileId);
                if (!previewUrl) {
                    return;
                }
                previewFrame.src = previewUrl;
                // PDF 주석 첨삭기 다이얼로그로 열기
                $(previewDialog).dialog({
                    title: fileName,
                    modal: true,
                    width: window.innerWidth * 0.95,
                    height: window.innerHeight * 0.85,
                    close: function () {
                        // 모달이 닫히면 src를 공백으로 설정하여 다이얼로그가 다시 열릴 때
                        // 이전 파일의 document가 잠깐이라도 보이지 않도록 한다.
                        previewFrame.src = '';
                    }
                });

                let openInNewWindowBtn = document.querySelector('#xn-open-in-new-window-btn');
                if (!openInNewWindowBtn) {
                    // 새 창으로 띄우기 버튼이 존재하지 않을 때 1회 생성
                    const titleBar = document.querySelector('.ui-dialog-titlebar');
                    openInNewWindowBtn = document.createElement('button');
                    openInNewWindowBtn.id = 'xn-open-in-new-window-btn';
                    openInNewWindowBtn.classList.add('ui-button', 'ui-widget', 'ui-state-default', 'ui-corner-all');
                    openInNewWindowBtn.innerText = langs.openInNewWindow[ENV.LOCALE] || langs.openInNewWindow.en;
                    openInNewWindowBtn.style.float = 'right';
                    openInNewWindowBtn.style.marginRight = '40px';
                    openInNewWindowBtn.onclick = async function () {
                        // 새 창으로 띄우기 버튼 클릭 시
                        const previewUrl = await getPreviewUrl(fileId);
                        window.open(previewUrl, '_blank');
                    };
                    titleBar.appendChild(openInNewWindowBtn);
                }
            };
            viewFeedbackContainer.appendChild(viewFeedbackBtn);
        });
    } catch (err) {}
});

/**
 * START: 과목 메뉴 > 퀴즈 or 과제 상세보기에 학습활동현황 바로가기 버튼 관련 코드
 */
$(document).ready(function() {
    try {
        const isQuizDetail = window.location.pathname.match(
            /\/courses\/(\d+)\/quizzes\/(\d+)$/
        );

        const isAssignmentDetail = window.location.pathname.match(
            /\/courses\/(\d+)\/assignments\/(\d+)$/
        );

        let courseId = null;
        let assignmentId = null;

        if (!!isQuizDetail && isQuizDetail.length > 0) {
            courseId = isQuizDetail[1];
            assignmentId = ENV.QUIZ.assignment_id;
        }

        if (!!isAssignmentDetail && isAssignmentDetail.length > 0) {
            courseId = isAssignmentDetail[1];
            assignmentId = isAssignmentDetail[2];
        }

        if ((!!isQuizDetail || !!isAssignmentDetail) && !!assignmentId && !!courseId) {
            const parentElement = document.querySelector('#right-side-wrapper .page-action-list');
            const isInstructor = !!document.querySelector(".btn.edit_assignment_link");

            if (!!parentElement && !!isInstructor) {
                const buttonTitleLangs = {
                    ko: '학습활동현황 바로가기',
                    en: 'Go to Learning activity',
                }
    
                const redirectToLearningActivityBtn = document.createElement('a');
                redirectToLearningActivityBtn.href = `/learningx/redirect/courses/${courseId}/external_tools/xinics_learning_activity?learning_activity_target_component_id=${assignmentId}&target=web`;
                redirectToLearningActivityBtn.innerText = buttonTitleLangs[ENV.LOCALE] || buttonTitleLangs["en"];
                redirectToLearningActivityBtn.style.borderRadius = "5px";
                redirectToLearningActivityBtn.style.padding = "8px 16px";
                redirectToLearningActivityBtn.style.backgroundColor = "rgb(40, 107, 252)";
                redirectToLearningActivityBtn.style.color = "white";
    
                const redirectToLearningActivityBtnContainer = document.createElement('li');
                redirectToLearningActivityBtnContainer.style.paddingTop = "5px";
                redirectToLearningActivityBtnContainer.appendChild(redirectToLearningActivityBtn);
    
                parentElement.appendChild(redirectToLearningActivityBtnContainer);
            }
        }
    } catch(err) {}
});
/**
 * END: 과목 메뉴 > 퀴즈 or 과제 상세보기에 학습활동현황 바로가기 버튼 관련 코드
 */

/**
 * START: 공지 메뉴에 공지 조회 현황 바로가기 버튼 관련 코드
 */
$(document).ready(function () {
    const isAnnouncements = window.location.pathname.match(/\/courses\/(\d+)\/announcements$/);
    const courseId = !!isAnnouncements && isAnnouncements.length > 0 ? isAnnouncements[1] : null;
    if (!courseId) return;

    const maxRetries = 5;
    const retryDelay = 500;
    let retryCount = 0;

    function createButton() {
        try {
            const parentElement = document.querySelector(".announcements-v2__wrapper");
            if (!parentElement) throw new Error();

            const isInstructor = !!parentElement.querySelector("#add_announcement");
            if (!isInstructor) throw new Error();

            const buttonTitleLangs = {
                ko: "공지 조회 현황",
                en: "Go to Announcement statistics",
            };

            const redirectToAnnouncementStatisticsBtn = document.createElement("a");
            redirectToAnnouncementStatisticsBtn.href = `/learningx/redirect/courses/${courseId}/external_tools/xinics_learningx_board?lx_board_view=announcement_statistics&target=web`;
            redirectToAnnouncementStatisticsBtn.innerText = buttonTitleLangs[ENV.LOCALE] || buttonTitleLangs["en"];
            redirectToAnnouncementStatisticsBtn.style.border = "1px solid #005DC6";
            redirectToAnnouncementStatisticsBtn.style.borderRadius = "5px";
            redirectToAnnouncementStatisticsBtn.style.padding = "10px 12px";
            redirectToAnnouncementStatisticsBtn.style.color = "#005DC6";
            redirectToAnnouncementStatisticsBtn.style.fontSize = "16px";
            redirectToAnnouncementStatisticsBtn.style.lineHeight = "21.79px";

            const redirectToAnnouncementStatisticsBtnContainer = document.createElement("div");
            redirectToAnnouncementStatisticsBtnContainer.style.display = "flex";
            redirectToAnnouncementStatisticsBtnContainer.style.justifyContent = "flex-end";
            redirectToAnnouncementStatisticsBtnContainer.style.marginTop = "16px";
            redirectToAnnouncementStatisticsBtnContainer.appendChild(redirectToAnnouncementStatisticsBtn);

            const containerElement = parentElement.querySelectorAll("span")[1];
            containerElement.appendChild(redirectToAnnouncementStatisticsBtnContainer);
        } catch (err) {
            if (retryCount < maxRetries) {
                retryCount++;
                setTimeout(createButton, retryDelay);
            }
        }
    }

    createButton();
});
/**
 * END: 공지 메뉴에 공지 조회 현황 바로가기 버튼 관련 코드
 */


// HELP NOTION
// 상수 정의
// Notion은 자체적으로 Iframe 접근을 제한하고 있기때문에 우피(Oopy)같은 웹사이트에서 생성한 우회가능한 도메인을 사용해야 한다.
var CONST_HELP_NOTION_URL_FOR_STUDENT = "https://www.ontactlearning.com/snu_help/student";
var CONST_HELP_NOTION_URL_FOR_PROFESSOR = "https://www.ontactlearning.com/snu_help/prof";
var helpNotionCustomJsUpdated = '20240228';
var helpNotionIframeLoaded = false;

$(function () {
    const maxRetries = 5;
    const retryDelay = 500;
    let retryCount = 0;
    try {
        attachHelpNotionIcon();
        attachHelpNotionContainer();
    } catch { 
        if (retryCount < maxRetries) {
            retryCount++;
            setTimeout(createButton, retryDelay);
        }
    }
});

// rocketchat icon은 'transform': 'translate(0, -50%)' 을 하고 있다.
// USG처럼 둘 다 사용하는 곳에서 겹치는 문제가 있어서 help-notion-icon은 윗쪽으로 50% 에 표시.
function attachHelpNotionIcon() {
    var helpNotionIcon = $('<div id="help-notion-icon"></div>');
    helpNotionIcon.css({
        'position': 'fixed',
        'z-index': '9999',
        'right': '0px',
        'bottom': '50%',
        'transform': 'translate(0, -50%)',
        'width': '23px',
        'height': '72px',
        'display': 'flex',
        'align-items': 'center',
        'justify-content': 'center',
        'background': '#4B63CE 0% 0% no-repeat padding-box',
        'box-shadow': '0px 3px 16px #00000029',
        'border': '1px solid #FFFFFF',
        'border-radius': '10px 0px 0px 10px',
        'border-right': 'none',
        'box-sizing': 'border-box',
        'cursor': 'pointer',
        'transition': 'all 0.3s ease-in-out',
    });

    helpNotionIcon.hover(
        function () {
            $(this).css({
                'border-radius': '20px 0px 0px 20px',
                'width': '55px',
            });
            $(this).find('.help_notion_closed_icon').css({
                'opacity': '0',
            });
            $(this).find('.help_notion_open_icon').css({
                'opacity': '1',
            });
        },
        function () {
            $(this).css({
                'border-radius': '10px 0px 0px 10px',
                'width': '23px',
            });
            $(this).find('.help_notion_closed_icon').css({
                'opacity': '1',
            });
            $(this).find('.help_notion_open_icon').css({
                'opacity': '0',
            });
        }
    );

    helpNotionIcon.on('click', onClickHelpNotionIcon);
    $('#application').append(helpNotionIcon);

    var helpNotionClosedIcon = $('<div class="help_notion_closed_icon">도움말</div>');
    helpNotionClosedIcon.css({
        'width': '8px',
        'height': '41px',
        'font-size': '12px',
        'color': '#fff',
        'line-height': '14px',
        'opacity': '1',
        'transition': 'all 0.2s ease-in-out',
        'position': 'absolute',
    })
    helpNotionIcon.append(helpNotionClosedIcon);

    var helpNotionOpenIcon = $(`
        <div class="help_notion_open_icon">
            도움말
            <img src="${CONST_XLEARN_SITE_URL + '/customs/canvas/help_icon.png?v=' + helpNotionCustomJsUpdated}" />
        </div>
    `);
    
    helpNotionOpenIcon.css({
        'width': '40px',
        'font-size': '12px',
        'color': '#fff',
        'line-height': '21px',
        'letter-spacing': '0.05em',
        'text-align': 'center',
        'opacity': '0',
        'transition': 'all 0.2s ease-in-out',
        'position': 'absolute',
    });
    helpNotionIcon.append(helpNotionOpenIcon);
}

function attachHelpNotionContainer() {
    var helpNotionContainer = $(`
        <div id="help-notion-container">
            <header id="help-notion-header" style="display:flex; justify-content:space-between; border-bottom: 1px solid #a5a5a5; padding: 0 10px; box-shadow: 0px 0.5px 2px #aaa;">
                <p style="font-weight: bold;">도움말</p>
            </header>
            <nav id="help-notion-nav" style="display: flex; gap:5px; border-bottom: 1px solid #a5a5a5; padding: 10px;">
                <button id="help-notion-for-student-btn">학습자 도움말</button>
                <button id="help-notion-for-professor-btn">교수자 도움말</button>
            </nav>
        </div>
    `);
    helpNotionContainer.css({
        'display': 'none',
        'position': 'fixed',
        'z-index': '9998',
        'right': '10px',
        'bottom': '10px',
        'width': '781px',
        'height': '600px',
        'border-radius': '3px',
        'background-color': 'white',
        'box-shadow': '0 3px 12px rgba(0,0,0, .16)',
        'overflow': 'hidden'
    });

    // nav 버튼
    helpNotionContainer.find("#help-notion-nav button").css({
        'background': '#fff',
        'border': '1px solid #a5a5a5',
        'border-radius': '10px',
        'padding': '8px 20px',
        "transition": "0.3s"
    })
    helpNotionContainer.find("#help-notion-nav button:first").addClass("active");
    helpNotionContainer.find("#help-notion-nav button").on("click", function () {
        if ($(this).hasClass("active")) {
            return;
        }
        $("#help-notion-nav button").removeClass("active");
        $(this).addClass("active");

        $("#help-notion-iframe").attr("src", changeHelpNotion);
    });

    // 새 창/닫기 버튼
    var helpNotionHeaderBtnWrapper = $(`
        <div style="display: flex; gap: 10px;">
            <button id="help-notion-new-window">
                <svg width="22" height="22" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg" stroke="#333333">
                    <g id="external-link">
                        <path id="Vector" d="M16 11.6V16.4C16 16.8243 15.8314 17.2313 15.5314 17.5314C15.2313 17.8314 14.8243 18 14.4 18H5.6C5.17565 18 4.76869 17.8314 4.46863 17.5314C4.16857 17.2313 4 16.8243 4 16.4V7.6C4 7.17565 4.16857 6.76869 4.46863 6.46863C4.76869 6.16857 5.17565 6 5.6 6H10.4" stroke="current" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path><path id="Vector_2" d="M13 4H18V9" stroke="current" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
                        <path id="Vector_3" d="M9 13L18 4" stroke="current" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
                    </g>
                </svg>
            </button>
            <button id="help-notion-close">
                <svg width="22" height="22" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <g id="x">
                        <path id="Vector" d="M16.5 5.5L5.5 16.5" stroke="#333333" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
                        <path id="Vector_2" d="M5.5 5.5L16.5 16.5" stroke="#333333" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
                    </g>
                </svg>
            </button>
        </div>
    `)
    helpNotionHeaderBtnWrapper.find("#help-notion-new-window, #help-notion-close").css({
        "border": "none",
        "background-color": "transparent",
        "padding": "0",
        "justify-content": "center",
        "align-items": "center",
        "display": "flex"
    });
    helpNotionHeaderBtnWrapper.find("#help-notion-new-window").on("click", onHelpNotionNewWindow);
    helpNotionHeaderBtnWrapper.find("#help-notion-close").on("click", onHelpNotionClose);

    helpNotionContainer.find("#help-notion-header").append(helpNotionHeaderBtnWrapper);

    // notion iframe
    var helpNotionIframe = $('<iframe id="help-notion-iframe" allowfullscreen frameborder="0" scrolling="auto"></iframe>');
    helpNotionIframe.css({
        'width': '100%',
        'height': '100%',
        'border-radius': '3px',
    });
    
    helpNotionContainer.append(helpNotionIframe);

    $("#application").append(helpNotionContainer);
}

function changeHelpNotion() {
    var activeButtonId = $("#help-notion-nav button.active").attr("id");
    return activeButtonId === "help-notion-for-student-btn"
        ? CONST_HELP_NOTION_URL_FOR_STUDENT
        : CONST_HELP_NOTION_URL_FOR_PROFESSOR
}

function changeHelpNotionContainerSize(size) {
    $('#help-notion-container').show();
    $('#help-notion-container').css('width', `${size}px`);
}

function onClickHelpNotionIcon() {
    if (!helpNotionIframeLoaded) {
        $("#help-notion-iframe").attr("src", changeHelpNotion);
        helpNotionIframeLoaded = true;
    }

    $("#help-notion-icon").hide();

    var defaultSize = 781;
    var windowWidth = $(window).width();

    switch (true) {
        case (windowWidth < 550):
            defaultSize = 350;
            break;
        case (windowWidth < 900):
            defaultSize = 500;
            break;
        default:
            defaultSize = 781;
    }
    changeHelpNotionContainerSize(defaultSize);
}

function onHelpNotionNewWindow() {
    window.open(changeHelpNotion());
}

function onHelpNotionClose() {
    $("#help-notion-container").hide();
    $("#help-notion-icon").show();
}

$(window).resize(function () {
    var newSize;
    var windowWidth = $(window).width();

    switch (true) {
        case (windowWidth < 550):
            newSize = 350;
            break;
        case (windowWidth < 900):
            newSize = 500;
            break;
        default:
            newSize = 781;
    }
    
    if ($("#help-notion-container").css("display") !== "none") {
        changeHelpNotionContainerSize(newSize);
    }
});